import {combineLatest, Observable} from 'rxjs'

declare var require: any;
declare var process: any;

const fs = require('fs');
const exec = require('child_process').exec;
/**
 * Get revision
 */
const revision = new Observable<string>(s => {
  exec('git rev-parse --short HEAD',
    (error: Error, stdout, stderr) => {
      if (error !== null) {
        console.log('git error: ' + error + stderr);
      }
      s.next(stdout.toString().trim());
      s.complete();
    });
});
/**
 * Get Branch
 */
const branch = new Observable<string>(s => {
  exec('git rev-parse --abbrev-ref HEAD',
    (error: Error, stdout, stderr) => {
      if (error !== null) {
        console.log('git error: ' + error + stderr);
      }
      s.next(stdout.toString().trim());
      s.complete();
    });
});
/**
 * Combine revision and Branch
 */
combineLatest(revision, branch)
  .subscribe(([revision, branch]) => {
    console.log(`version: '${process.env.npm_package_version}', revision: '${revision}', branch: '${branch}'`);

    const content = '// this file is automatically generated by git.version-v1.ts script\n' +
      `export const versions = {version: '${process.env.npm_package_version}', revision: '${revision}', branch: '${branch}'};`;

    fs.writeFileSync(
      'src/environments/versions.ts',
      content,
      {encoding: 'utf8'}
    );
  });
